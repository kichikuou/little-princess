// @ts-check

/**
 * Sleep for a specified number of milliseconds.
 * @param {number} ms
 * @returns {Promise<void>}
 */
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

const ZENKAKU_KATAKANA = "アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンァィゥェォャュョッー゛゜";
const HANKAKU_KATAKANA = "ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝｧｨｩｪｫｬｭｮｯｰﾞﾟ";

const mappings = [
    ["ltsu","ツ"],
    ["xtsu","ッ"],
    ["bya","ヒ゛ャ"],
    ["byi","ヒ゛ィ"],
    ["byu","ヒ゛ュ"],
    ["bye","ヒ゛ェ"],
    ["byo","ヒ゛ョ"],
    ["cha","チャ"],
    ["chi","チ"],
    ["chu","チュ"],
    ["che","チェ"],
    ["cho","チョ"],
    ["cya","チャ"],
    ["cyi","チィ"],
    ["cyu","チュ"],
    ["cye","チェ"],
    ["cyo","チョ"],
    ["dha","テ゛ャ"],
    ["dhi","テ゛ィ"],
    ["dhu","テ゛ュ"],
    ["dhe","テ゛ェ"],
    ["dho","テ゛ョ"],
    ["dya","チ゛ャ"],
    ["dyi","チ゛ィ"],
    ["dyu","チ゛ュ"],
    ["dye","チ゛ェ"],
    ["dyo","チ゛ョ"],
    ["fya","フャ"],
    ["fyi","フィ"],
    ["fyu","フュ"],
    ["fye","フェ"],
    ["fyo","フョ"],
    ["gya","キ゛ャ"],
    ["gyi","キ゛ィ"],
    ["gyu","キ゛ュ"],
    ["gye","キ゛ェ"],
    ["gyo","キ゛ョ"],
    ["hya","ヒャ"],
    ["hyi","ヒィ"],
    ["hyu","ヒュ"],
    ["hye","ヒェ"],
    ["hyo","ヒョ"],
    ["jya","シ゛ャ"],
    ["jyi","シ゛ィ"],
    ["jyu","シ゛ュ"],
    ["jye","シ゛ェ"],
    ["jyo","シ゛ョ"],
    ["kya","キャ"],
    ["kyi","キィ"],
    ["kyu","キュ"],
    ["kye","キェ"],
    ["kyo","キョ"],
    ["ltu","ッ"],
    ["lya","ャ"],
    ["lyu","ュ"],
    ["lyo","ョ"],
    ["mya","ミャ"],
    ["myi","ミィ"],
    ["myu","ミュ"],
    ["mye","ミェ"],
    ["myo","ミョ"],
    ["nya","ニャ"],
    ["nyi","ニィ"],
    ["nyu","ニュ"],
    ["nye","ニェ"],
    ["nyo","ニョ"],
    ["pya","ヒ゜ャ"],
    ["pyi","ヒ゜ィ"],
    ["pyu","ヒ゜ュ"],
    ["pye","ヒ゜ェ"],
    ["pyo","ヒ゜ョ"],
    ["qya","クャ"],
    ["qyi","クィ"],
    ["qyu","クュ"],
    ["qye","クェ"],
    ["qyo","クョ"],
    ["rya","リャ"],
    ["ryi","リィ"],
    ["ryu","リュ"],
    ["rye","リェ"],
    ["ryo","リョ"],
    ["sha","シャ"],
    ["shi","シ"],
    ["shu","シュ"],
    ["she","シェ"],
    ["sho","ショ"],
    ["sya","シャ"],
    ["syi","シィ"],
    ["syu","シュ"],
    ["sye","シェ"],
    ["syo","ショ"],
    ["tha","テャ"],
    ["thi","ティ"],
    ["thu","テュ"],
    ["the","テェ"],
    ["tho","テョ"],
    ["tsa","ツァ"],
    ["tsi","ツィ"],
    ["tsu","ツ"],
    ["tse","ツェ"],
    ["tso","ツォ"],
    ["tya","チャ"],
    ["tyi","チィ"],
    ["tyu","チュ"],
    ["tye","チェ"],
    ["tyo","チョ"],
    ["vya","ウ゛ャ"],
    ["vyi","ウ゛ィ"],
    ["vyu","ウ゛ュ"],
    ["vye","ウ゛ェ"],
    ["vyo","ウ゛ョ"],
    ["xtu","ッ"],
    ["xya","ャ"],
    ["xyu","ュ"],
    ["xyo","ョ"],
    ["zya","シ゛ャ"],
    ["zyi","シ゛ィ"],
    ["zyu","シ゛ュ"],
    ["zye","シ゛ェ"],
    ["zyo","シ゛ョ"],
    ["ba","ハ゛"],
    ["bi","ヒ゛"],
    ["bu","フ゛"],
    ["be","ヘ゛"],
    ["bo","ホ゛"],
    ["ca","カ"],
    ["ci","シ"],
    ["cu","ク"],
    ["ce","セ"],
    ["co","コ"],
    ["da","タ゛"],
    ["di","チ゛"],
    ["du","ツ゛"],
    ["de","テ゛"],
    ["do","ト゛"],
    ["fa","ファ"],
    ["fi","フィ"],
    ["fu","フ"],
    ["fe","フェ"],
    ["fo","フォ"],
    ["ga","カ゛"],
    ["gi","キ゛"],
    ["gu","ク゛"],
    ["ge","ケ゛"],
    ["go","コ゛"],
    ["ha","ハ"],
    ["hi","ヒ"],
    ["hu","フ"],
    ["he","ヘ"],
    ["ho","ホ"],
    ["ja","シ゛ャ"],
    ["ji","シ゛"],
    ["ju","シ゛ュ"],
    ["je","シ゛ェ"],
    ["jo","シ゛ョ"],
    ["ka","カ"],
    ["ki","キ"],
    ["ku","ク"],
    ["ke","ケ"],
    ["ko","コ"],
    ["la","ァ"],
    ["li","ィ"],
    ["lu","ゥ"],
    ["le","ェ"],
    ["lo","ォ"],
    ["ma","マ"],
    ["mi","ミ"],
    ["mu","ム"],
    ["me","メ"],
    ["mo","モ"],
    ["na","ナ"],
    ["ni","ニ"],
    ["nu","ヌ"],
    ["ne","ネ"],
    ["no","ノ"],
    ["pa","ハ゜"],
    ["pi","ヒ゜"],
    ["pu","フ゜"],
    ["pe","ヘ゜"],
    ["po","ホ゜"],
    ["qa","クァ"],
    ["qi","クィ"],
    ["qu","ク"],
    ["qe","クェ"],
    ["qo","クォ"],
    ["ra","ラ"],
    ["ri","リ"],
    ["ru","ル"],
    ["re","レ"],
    ["ro","ロ"],
    ["sa","サ"],
    ["si","シ"],
    ["su","ス"],
    ["se","セ"],
    ["so","ソ"],
    ["ta","タ"],
    ["ti","チ"],
    ["tu","ツ"],
    ["te","テ"],
    ["to","ト"],
    ["va","ウ゛ァ"],
    ["vi","ウ゛ィ"],
    ["vu","ウ゛"],
    ["ve","ウ゛ェ"],
    ["vo","ウ゛ォ"],
    ["wa","ワ"],
    ["wi","ウィ"],
    ["wu","ウ"],
    ["we","ウェ"],
    ["wo","ヲ"],
    ["xa","ァ"],
    ["xi","ィ"],
    ["xu","ゥ"],
    ["xe","ェ"],
    ["xo","ォ"],
    ["ya","ヤ"],
    ["yi","イ"],
    ["yu","ユ"],
    ["ye","イェ"],
    ["yo","ヨ"],
    ["za","サ゛"],
    ["zi","シ゛"],
    ["zu","ス゛"],
    ["ze","セ゛"],
    ["zo","ソ゛"],
    ["nb","ンb"],
    ["nc","ンc"],
    ["nd","ンd"],
    ["nf","ンf"],
    ["ng","ンg"],
    ["nh","ンh"],
    ["nj","ンj"],
    ["nk","ンk"],
    ["nl","ンl"],
    ["nm","ンm"],
    ["nn","ン"],
    ["np","ンp"],
    ["nq","ンq"],
    ["nr","ンr"],
    ["ns","ンs"],
    ["nt","ンt"],
    ["nv","ンv"],
    ["nw","ンw"],
    ["nx","ンx"],
    ["nz","ンz"],
    ["bb","ッb"],
    ["cc","ッc"],
    ["dd","ッd"],
    ["ff","ッf"],
    ["gg","ッg"],
    ["hh","ッh"],
    ["jj","ッj"],
    ["kk","ッk"],
    ["ll","ッl"],
    ["mm","ッm"],
    ["pp","ッp"],
    ["qq","ッq"],
    ["rr","ッr"],
    ["ss","ッs"],
    ["tt","ッt"],
    ["vv","ッv"],
    ["ww","ッw"],
    ["xx","ッx"],
    ["yy","ッy"],
    ["zz","ッz"],
    ["a","ア"],
    ["i","イ"],
    ["u","ウ"],
    ["e","エ"],
    ["o","オ"]
]

/**
 * Converts a zenkaku katakana character to its hankaku equivalent.
 * @param {string} char - Zenkaku katakana character.
 * @returns {string} Hankaku katakana character or original if not found.
 */
function getHankaku(char) {
    const index = ZENKAKU_KATAKANA.indexOf(char);
    return index !== -1 ? HANKAKU_KATAKANA[index] : char;
}

/**
 * Determines if a character is hankaku katakana.
 * @param {string} char - Character to check.
 * @returns {boolean} True if hankaku katakana, otherwise false.
 */
function isHankaku(char) {
    return char.match(/[^\x00-\x7F]/) === null || HANKAKU_KATAKANA.includes(char);
}

/**
 * Converts romanized text to katakana if the end of the string matches a mapping.
 * Only the matching suffix is converted.
 * @param {string} text - Romanized input.
 * @returns {string} Katakana string.
 */
function convertRoman(text) {
    if (!text) {
        return "";
    }
    const lowerText = text.toLowerCase();
    for (const [roman, kana] of mappings) {
        if (lowerText.endsWith(roman)) {
            return text.substring(0, text.length - roman.length) + kana;
        }
    }
    return text;
}
